/*
   -- RemoteXY Control for RC Car --
   Generated by RemoteXY editor for ESP32 BLE control.
   Requires RemoteXY library 3.1.13+[](http://remotexy.com/en/library/).
   Connect via RemoteXY app[](http://remoxy.com/en/download/):
     - Android 4.15.01+
     - iOS 1.12.1+
   Licensed under GNU Lesser General Public License v2.1+.
*/

#define REMOTEXY_MODE__ESP32CORE_BLE
#include <BLEDevice.h>
#define REMOTEXY_BLUETOOTH_NAME "RemoteXY"
#include <RemoteXY.h>

#pragma pack(push, 1)
uint8_t RemoteXY_CONF[] = { // 47 bytes
  255,3,0,1,0,40,0,19,0,0,0,0,31,1,106,200,1,1,3,0,
  5,24,69,60,60,0,2,26,31,1,41,168,24,24,0,36,31,0,70,45,
  7,18,18,16,26,135,0
};

struct {
  int8_t joystick_x; // -100 to 100
  int8_t joystick_y; // -100 to 100
  uint8_t button_stop; // 1=pressed, 0=released
  uint8_t connect_flag; // 1=connected, 0=disconnected
} RemoteXY;
#pragma pack(pop)

#define IN1 14 // 左馬達 IN1
#define IN2 27 // 左馬達 IN2
#define IN3 26 // 右馬達 IN3
#define IN4 25 // 右馬達 IN4

void setup() {
  Serial.begin(115200);
  delay(100);
  Serial.println("Starting BLE initialization...");

  // 初始化 BLE 設備
  BLEDevice::init("RemoteXY");
  Serial.println("BLE Device initialized with name: RemoteXY");

  // 初始化 RemoteXY
  RemoteXY_Init();
  Serial.println("RemoteXY initialized");

  // 設定馬達控制腳位
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  stopMotors();
  Serial.println("Motor pins configured. Setup complete.");
}

void loop() {
  RemoteXY_Handler();
  static uint8_t last_connect_flag = 0;
  static unsigned long last_print = 0;

  // 檢查連線狀態變化
  if (RemoteXY.connect_flag != last_connect_flag) {
    last_connect_flag = RemoteXY.connect_flag;
    Serial.print("Connection: ");
    Serial.println(RemoteXY.connect_flag ? "Connected" : "Disconnected");
  }

  // 每 500ms 輸出狀態
  if (millis() - last_print >= 500) {
    last_print = millis();
    Serial.print("Connect Flag: "); Serial.println(RemoteXY.connect_flag);
    Serial.print("Joystick X: "); Serial.print(RemoteXY.joystick_x);
    Serial.print(", Y: "); Serial.print(RemoteXY.joystick_y);
    Serial.print(", Stop Button: "); Serial.println(RemoteXY.button_stop);
  }

  // 決定馬達指令
  char command = 'S'; // 預設停止
  if (RemoteXY.connect_flag) {
    if (RemoteXY.button_stop == 1) {
      command = 'S'; // 停止按鈕優先
    } else {
      // 根據搖桿位置設定指令
      if (RemoteXY.joystick_y > 10) {
        command = 'F'; // 前進
      } else if (RemoteXY.joystick_y < -10) {
        command = 'B'; // 後退
      } else if (RemoteXY.joystick_x < -10) {
        command = 'L'; // 左轉
      } else if (RemoteXY.joystick_x > 10) {
        command = 'R'; // 右轉
      }
    }
  }

  // 使用 switch 處理馬達控制
  int speed = RemoteXY.connect_flag ? map(max(abs(RemoteXY.joystick_y), abs(RemoteXY.joystick_x)), 0, 100, 0, 255) : 0;
  Serial.print("Command: "); Serial.print(command);
  Serial.print(", Speed: "); Serial.println(speed);
  switch (command) {
    case 'F': // 前進
      goForward(speed);
      Serial.println("Going Forward");
      break;
    case 'B': // 後退
      goBackward(speed);
      Serial.println("Going Backward");
      break;
    case 'L': // 左轉
      turnLeft(speed);
      Serial.println("Turning Left");
      break;
    case 'R': // 右轉
      turnRight(speed);
      Serial.println("Turning Right");
      break;
    case 'S': // 停止
    default: // 未連線或無效指令
      stopMotors();
      Serial.println(RemoteXY.connect_flag ? "Stopped" : "Stopped (Disconnected)");
      break;
  }
  delay(10);
}

// 馬達控制函式
void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  Serial.println("Motors: IN1=0, IN2=0, IN3=0, IN4=0");
}

void goForward(int speed) {
  analogWrite(IN1, speed);
  digitalWrite(IN2, LOW);
  analogWrite(IN3, speed);
  digitalWrite(IN4, LOW);
  Serial.print("Forward: IN1="); Serial.print(speed);
  Serial.print(", IN2=0, IN3="); Serial.print(speed);
  Serial.println(", IN4=0");
}

void goBackward(int speed) {
  digitalWrite(IN1, LOW);
  analogWrite(IN2, speed);
  digitalWrite(IN3, LOW);
  analogWrite(IN4, speed);
  Serial.print("Backward: IN1=0, IN2="); Serial.print(speed);
  Serial.print(", IN3=0, IN4="); Serial.println(speed);
}

void turnLeft(int speed) {
  digitalWrite(IN1, LOW);
  analogWrite(IN2, speed);
  analogWrite(IN3, speed);
  digitalWrite(IN4, LOW);
  Serial.print("Left: IN1=0, IN2="); Serial.print(speed);
  Serial.print(", IN3="); Serial.print(speed);
  Serial.println(", IN4=0");
}

void turnRight(int speed) {
  analogWrite(IN1, speed);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  analogWrite(IN4, speed);
  Serial.print("Right: IN1="); Serial.print(speed);
  Serial.print(", IN2=0, IN3=0, IN4="); Serial.println(speed);
}