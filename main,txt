/*
   -- RemoteXY Control for RC Car --
   Generated by RemoteXY editor for ESP32 BLE control.
   Requires RemoteXY library 3.1.13+[](http://remotexy.com/en/library/).
   Connect via RemoteXY app[](http://remoxy.com/en/download/):
     - Android 4.15.01+
     - iOS 1.12.1+
   Licensed under GNU Lesser General Public License v2.1+.
*/

#define REMOTEXY_MODE__ESP32CORE_BLE
#include <BLEDevice.h>
#define REMOTEXY_BLUETOOTH_NAME "RemoteXY"
#include <RemoteXY.h>

#pragma pack(push, 1)
uint8_t RemoteXY_CONF[] = { // 47 bytes
  255,3,0,1,0,40,0,19,0,0,0,0,31,1,106,200,1,1,3,0,
  5,24,69,60,60,0,2,26,31,1,41,168,24,24,0,36,31,0,70,45,
  7,18,18,16,26,135,0
};

struct {
  int8_t joystick_x; // -100 to 100
  int8_t joystick_y; // -100 to 100
  uint8_t button_stop; // 1=pressed, 0=released
  uint8_t connect_flag; // 1=connected, 0=disconnected
} RemoteXY;
#pragma pack(pop)

#define IN1 14
#define IN2 27
#define IN3 26
#define IN4 25

void setup() {
  Serial.begin(115200);
  delay(100);
  Serial.println("Starting RemoteXY init");
  RemoteXY_Init();
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  stopMotors();
  Serial.println("RemoteXY init done");
}

void loop() {
  RemoteXY_Handler();
  static uint8_t last_connect_flag = 0;
  static unsigned long last_print = 0;
  if (RemoteXY.connect_flag != last_connect_flag) {
    last_connect_flag = RemoteXY.connect_flag;
    Serial.print("Connection: ");
    Serial.println(RemoteXY.connect_flag ? "Connected" : "Disconnected");
  }
  if (millis() - last_print >= 500) { // Print every 500ms
    last_print = millis();
    Serial.print("Connect Flag: "); Serial.println(RemoteXY.connect_flag);
    Serial.print("X: "); Serial.print(RemoteXY.joystick_x);
    Serial.print(", Y: "); Serial.print(RemoteXY.joystick_y);
    Serial.print(", Stop: "); Serial.println(RemoteXY.button_stop);
  }
  if (RemoteXY.connect_flag) {
    if (RemoteXY.button_stop == 1) {
      stopMotors();
      Serial.println("Stop button pressed");
      return;
    }
    int speed = map(max(abs(RemoteXY.joystick_y), abs(RemoteXY.joystick_x)), 0, 100, 0, 255);
    Serial.print("Speed: "); Serial.println(speed);
    if (RemoteXY.joystick_y > 10) { // Lower threshold
      goForward(speed);
      Serial.println("Forward");
    } else if (RemoteXY.joystick_y < -10) {
      goBackward(speed);
      Serial.println("Backward");
    } else if (RemoteXY.joystick_x < -10) {
      turnLeft(speed);
      Serial.println("Left");
    } else if (RemoteXY.joystick_x > 10) {
      turnRight(speed);
      Serial.println("Right");
    } else {
      stopMotors();
      Serial.println("Stopped");
    }
  } else {
    stopMotors();
    Serial.println("Stopped (Disconnected)");
  }
  delay(10);
}

void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  Serial.println("Motors: IN1=0, IN2=0, IN3=0, IN4=0");
}

void goForward(int speed) {
  analogWrite(IN1, speed);
  digitalWrite(IN2, LOW);
  analogWrite(IN3, speed);
  digitalWrite(IN4, LOW);
  Serial.print("Forward: IN1="); Serial.print(speed); Serial.println(", IN2=0, IN3="); Serial.print(speed); Serial.println(", IN4=0");
}

void goBackward(int speed) {
  digitalWrite(IN1, LOW);
  analogWrite(IN2, speed);
  digitalWrite(IN3, LOW);
  analogWrite(IN4, speed);
  Serial.print("Backward: IN1=0, IN2="); Serial.print(speed); Serial.println(", IN3=0, IN4="); Serial.println(speed);
}

void turnLeft(int speed) {
  digitalWrite(IN1, LOW);
  analogWrite(IN2, speed);
  analogWrite(IN3, speed);
  digitalWrite(IN4, LOW);
  Serial.print("Left: IN1=0, IN2="); Serial.print(speed); Serial.println(", IN3="); Serial.print(speed); Serial.println(", IN4=0");
}

void turnRight(int speed) {
  analogWrite(IN1, speed);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  analogWrite(IN4, speed);
  Serial.print("Right: IN1="); Serial.print(speed); Serial.println(", IN2=0, IN3=0, IN4="); Serial.println(speed);
}