/* -- 新專案 --

此圖形使用者介面原始碼由 RemoteXY 編輯器自動生成。 需使用 RemoteXY 函式庫 3.1.13 或更新版本，點擊連結下載：http://remotexy.com/en/library/ 使用 RemoteXY 手機應用程式連結：http://remotexy.com/en/download/
- Android 4.15.01 或更新版本 - iOS 1.12.1 或更新版本

此原始碼為自由軟體；您可以根據 GNU 較寬鬆公共授權條款（版本 2.1 或您選擇的任何後續版本）進行重新分發或修改。 */

////////////////////////////////////////////// // RemoteXY 函式庫引入 // //////////////////////////////////////////////

// 可啟用序列埠除錯記錄，波特率 115200 //#define REMOTEXY__DEBUGLOG

// 選擇 RemoteXY 連線模式並引入函式庫 #define REMOTEXY_MODE__ESP32CORE_BLE #include <BLEDevice.h>

// RemoteXY 連線設定 #define REMOTEXY_BLUETOOTH_NAME "RemoteXY"

#include <RemoteXY.h>

// RemoteXY GUI 配置
#pragma pack(push, 1)
uint8_t RemoteXY_CONF[] = // 47 位元組 { 255,3,0,1,0,40,0,19,0,0,0,0,31,1,106,200,1,1,3,0, 5,24,69,60,60,0,2,26,31,1,41,168,24,24,0,36,31,0,70,45, 7,18,18,16,26,135,0 };

// 定義控制介面的所有變數和事件結構 struct { // 輸入變數 int8_t joystick_x; // -100 至 100 int8_t joystick_y; // -100 至 100 uint8_t button_stop; // 按下時為 1，鬆開時為 0

// 輸出變數 uint8_t connect_flag; // 0 至 1

// 其他變數 uint8_t connect_flag; // 連線時為 1，斷線時為 0 } RemoteXY;
#pragma pack(pop)

///////////////////////////////////////////// // RemoteXY 引入結束 // /////////////////////////////////////////////

// 馬達控制腳位 (L298N) #define IN1 5 #define IN2 18 #define IN3 19 #define IN4 21

void setup() { // 初始化 RemoteXY RemoteXY_Init();

// 初始化馬達控制腳位 pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT); pinMode(IN3, OUTPUT); pinMode(IN4, OUTPUT);

// 初始停止馬達 stopMotors();

// 初始化序列埠用於除錯 (可選) Serial.begin(115200); }

void loop() { // 處理 RemoteXY 通信 RemoteXY_Handler();

// 優先檢查停止按鈕 if (RemoteXY.button_stop == 1) { stopMotors(); Serial.println("停止按鈕被按下"); return; }

// 將搖桿值映射為馬達速度 (0 至 255) int speed = map(max(abs(RemoteXY.joystick_y), abs(RemoteXY.joystick_x)), 0, 100, 0, 255);

// 根據搖桿控制馬達 if (RemoteXY.joystick_y > 20) { // 前進 goForward(speed); Serial.println("前進"); } else if (RemoteXY.joystick_y < -20) { // 後退 goBackward(speed); Serial.println("後退"); } else if (RemoteXY.joystick_x < -20) { // 左轉 turnLeft(speed); Serial.println("左轉"); } else if (RemoteXY.joystick_x > 20) { // 右轉 turnRight(speed); Serial.println("右轉"); } else { // 搖桿中立時停止 stopMotors(); Serial.println("停止"); }

// 避免使用 delay()，如需延遲使用 RemoteXY_delay() // RemoteXY_delay(10); }

// 馬達控制函式 void stopMotors() { // 停止所有馬達 digitalWrite(IN1, LOW); digitalWrite(IN2, LOW); digitalWrite(IN3, LOW); digitalWrite(IN4, LOW); }

void goForward(int speed) { // 馬達前進 analogWrite(IN1, speed); digitalWrite(IN2, LOW); analogWrite(IN3, speed); digitalWrite(IN4, LOW); }

void goBackward(int speed) { // 馬達後退 digitalWrite(IN1, LOW); analogWrite(IN2, speed); digitalWrite(IN3, LOW); analogWrite(IN4, speed); }

void turnLeft(int speed) { // 馬達左轉 digitalWrite(IN1, LOW); analogWrite(IN2, speed); analogWrite(IN3, speed); digitalWrite(IN4, LOW); }

void turnRight(int speed) { // 馬達右轉 analogWrite(IN1, speed); digitalWrite(IN2, LOW); digitalWrite(IN3, LOW); analogWrite(IN4, speed); }